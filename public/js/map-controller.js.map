{"version":3,"sources":["map-controller.coffee"],"names":[],"mappings":"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","file":"map-controller.js","sourceRoot":"/source/","sourcesContent":["window.mapController = window.mapController || (->\n\n    # @var object Our map object\n    _map = null\n\n    # @var object Store loaded markers here\n    _active_markers = {}\n\n    # @var array Store data as we received it so it can be filtered again\n    _data = null\n\n    # @var object Where to center the map on load\n    _startCenter = {\n        lat: 54.4,\n        lng: -3.4,\n    }\n\n    # @var integer When to start loading markers\n    _zoomMax = 10\n\n\n    # called when initiating the map\n    _init = () ->\n\n        # get the container div\n        container = document.getElementById(\"map\")\n\n        # check what kind of map we're displaying: single, multi (marker), etc\n        switch $(container).data('type')\n            when 'single'\n\n                # get the json from the data attr\n                listing = $(container).data('listing')\n\n                # initiate the map\n                _initMapObject container, {\n                    zoom: 18,\n                    lat: listing.loc[1],\n                    lng: listing.loc[0],\n                }\n\n                # set the map\n                _setMarker listing, {\n                    infowindow: false,\n                    draggable: if $(container).data('draggable') then true else false,\n                    animation: if $(container).data('draggable') then google.maps.Animation.DROP else null\n                }\n\n            when 'multi'\n            else\n\n                # create the map object for a multi market\n                _initMapObject container, {\n                    zoom: 6\n                }\n\n                # prepare filters\n                # set region/city select to move to location when\n                # dragged. we can rely on \"idle\" event listener to\n                # reload _active_markers\n                $('.filters select[name=\"city\"]').on \"change\", () ->\n                    lat = $(this).find(':selected').data('lat')\n                    lng = $(this).find(':selected').data('lng')\n                    _moveToLocation(lat, lng)\n\n                # when a group checkbox is checked, set all child checkboxes\n                $('.filters .groups .group input[type=\"checkbox\"]').on \"change\", () ->\n                    # set a refere\n                    group_checked = this.checked\n                    # set tags to same as group checkbox\n                    $(this).closest('.panel').find('.tags input[type=\"checkbox\"]').prop \"checked\", group_checked\n                    # update markers based on tag checkboxes checked\n                    _updateMarkers()\n\n                # set region/city select to move to location when\n                # tags changed DELETED filter markers on front end instead\n                $('.filters .groups .tags input[type=\"checkbox\"]').on \"change\", () ->\n                    # update markers based on tag checkboxes checked\n                    _updateMarkers()\n\n                # set *_changed events so that markers are re-loaded when\n                # the map changes\n                google.maps.event.addListener _map,'idle', () ->\n                    if $(container).data('cluster')\n                        _loadMarkerCluster();\n                    else\n                        _loadMarkers()\n\n\n    # This will set the map objects to the values passed in\n    # @param DOMelement container The DOM element of the map container\n    # @param Object options Options from the map (e.g. zoom, lat, lng)\n    _initMapObject = (container, options) ->\n\n        # set default\n        options = $.extend {\n            lat: _startCenter.lat,\n            lng: _startCenter.lng,\n            zoom: 6\n        }, options\n\n        # set object\n        _map = new google.maps.Map container, {\n            center: new google.maps.LatLng(options.lat, options.lng),\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\n            zoom: options.zoom\n        }\n\n\n    # pan the map to a given lat/lgn/zoom\n    # @param float lat Latitude value\n    # @param float lng Longitude value\n    # @param integer zoom Zoom value\n    _moveToLocation = (lat, lng, zoom) ->\n\n        # set the center LatLng object\n        center = new google.maps.LatLng(lat, lng)\n\n        # using global variable:\n        _map.panTo center\n        _map.setZoom 11\n\n\n    # load markets for the bounds\n    _loadMarkers = () ->\n\n        # only get points if zoomed enough in\n        if (_zoomMax && _map.getZoom() < _zoomMax) then return false;\n\n        # load markers\n        $.ajax {\n            url: \"/listings\",\n            method: \"GET\",\n            data: {\n                bounds: _map.getBounds().toUrlValue(),\n            },\n            success: (data) ->\n                # set data so we can filter later\n                _data = data\n                # filter the tags\n                filtered_listings = _filterListingsByTags _data[\"listings\"]\n                for i,listing of filtered_listings\n                    _setMarker listing\n        }\n\n\n    # load marker cluster\n    _loadMarkerCluster = () ->\n\n        # load markers\n        $.ajax {\n            url: \"/listings\",\n            method: \"GET\",\n            data: {\n                bounds: _map.getBounds().toUrlValue(),\n            },\n            success: (data) ->\n                # reset markers\n                _markers = [];\n                # loop through each data and build _markers array\n                $(data['listings']).each (index, listing) ->\n                    _markers.push new google.maps.Marker {\n                        'position': new google.maps.LatLng(listing.loc[1], listing.loc[0])\n                    }\n                # generate a map cluster\n                markerCluster = new MarkerClusterer _map, _markers, {\n                    gridSize: 60,\n                }\n        }\n\n    # update the markers based on tags, not load\n    _updateMarkers = () ->\n\n        # best to remove all tags as don't know from the filtered\n        # array which ones to remove\n        _removeMarkers()\n\n        # filter the tags\n        filtered_listings = _filterListingsByTags _data[\"listings\"]\n        for i,listing of filtered_listings\n            _setMarker listing\n\n\n    # get the selected tags from checkboxes\n    _getSelectedTags = () ->\n\n        tags = []\n        $(\".filters .groups .tags input[type='checkbox']:checked\").each (index, value) ->\n            tags.push($(value).val());\n        return tags\n\n\n    # filter listings array of those that contain at least one tag from tags\n    # @param array markers Listing array\n    # @param array tags Listing of accepted tags\n    _filterListingsByTags = (listings) ->\n\n        # return the ids of all checkboxes as tags\n        tags = _getSelectedTags()\n\n        # return the result of the filter as filtered array\n        return listings.filter (listing) ->\n            for i,listing_tag of listing[\"tags\"]\n                for j,tag of tags\n                    return true if listing_tag == tag\n\n\n\n    # set a single marker\n    # @param object listing A single listing\n    # @param object options Options for the marker\n    _setMarker = (listing, options) ->\n\n        # set default\n        options = $.extend {\n            infowindow: true,\n            draggable: false,\n            animation: null,\n        }, options\n\n        # set the latLng from the listings loc\n        latLng = new google.maps.LatLng listing.loc[1], listing.loc[0]\n\n        # Creating a marker if not previously loaded\n        if (!_active_markers[listing._id])\n            marker = new google.maps.Marker {\n                position: latLng,\n                map: _map,\n                title: listing.name,\n                draggable: options.draggable,\n                animation: options.animation\n            }\n            # add the marker to the _active_markers object\n            _active_markers[listing._id] = marker;\n\n            if (options.infowindow)\n\n                 # create the info window\n                 contentString = '<div class=\"infowindow\">'+\n                 '<h2>'+listing[\"name\"]+'</h2>'+\n                 '<p class=\"rating\">'+\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star-empty\" aria-hidden=\"true\"></span>' +\n                 '</p>'+\n                 '<p>'+listing[\"description_short\"]+'</p>'+\n                 '<p>'+listing[\"address\"]+'</p>'+\n                 '<p><a href=\"/listings/'+listing[\"_id\"]+'\">Go to page</a></p>'+\n                 '</div>'\n\n                 infowindow = new google.maps.InfoWindow {\n                     content: contentString\n                 }\n\n                 google.maps.event.addListener marker, 'click', () ->\n                     infowindow.open(_map, marker)\n\n                 # if draggable, set to draggable\n                 if (options.draggable)\n                     google.maps.event.addListener marker, 'dragend', () ->\n                        $(\"input[name='loc[1]']\").val(marker.getPosition().lat())\n                        $(\"input[name='loc[0]']\").val(marker.getPosition().lng())\n\n\n     # This is to remove all markers from the map. Used\n     # when we need to redraw (e.g. set tag filters, not move)\n     _removeMarkers = () ->\n\n        # remove marker\n        for i,marker of _active_markers\n            marker.setMap(null)\n\n        # empty _active_markers\n        _active_markers = {};\n\n\n     # public\n     return {\n         init: _init\n     }\n)()\n"]}