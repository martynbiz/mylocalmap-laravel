{"version":3,"sources":["map.coffee"],"names":[],"mappings":"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","file":"map.js","sourceRoot":"/source/","sourcesContent":["window.mapController = window.mapController || (->\n\n    # @var object Our map object\n    _map = null\n\n    # @var object Store loaded markers here\n    _markers = {}\n\n    # @var object Where to center the map on load\n    _startCenter = {\n        lat: 54.4,\n        lng: -3.4,\n    }\n\n    # @var integer When to start loading markers\n    _zoomMax = 10\n\n\n\n    # called when initiating the map\n    _init = () ->\n\n        container = document.getElementById(\"map\")\n\n        # check what kind of map we're displaying: single, multi (marker), etc\n        switch $(container).data('type')\n            when 'single'\n                listing = $(container).data('listing')\n\n                # initiate the map\n                _initMapObject container, {\n                    zoom: 18,\n                    lat: listing.loc[1],\n                    lng: listing.loc[0],\n                }\n\n                # set the map\n                _setMarker listing, {\n                    infowindow: false,\n                    draggable: if $(container).data('draggable') then true else false,\n                    animation: if $(container).data('draggable') then google.maps.Animation.DROP else null\n                }\n            when 'multi'\n            else\n\n                _initMapObject container, {\n                    zoom: 6\n                }\n\n                # prepare filters\n\n                # set region/city select to move to location when\n                # dragged. we can rely on \"idle\" event listener to\n                # reload _markers\n                $('.filters select[name=\"city\"]').on \"change\", () ->\n                    lat = $(this).find(':selected').data('lat')\n                    lng = $(this).find(':selected').data('lng')\n                    _moveToLocation(lat, lng)\n\n                # set region/city select to move to location when\n                # tags changed DELETED filter markers on front end instead\n                $('.filters .groups .tags input[type=\"checkbox\"]').on \"change\", () ->\n                    console.log 'todo: filter markers based on tags'\n\n                # set *_changed events so that markers are re-loaded when\n                # the map changes\n                google.maps.event.addListener _map,'idle', () ->\n                    if $(container).data('cluster')\n                        _loadMarkerCluster();\n                    else\n                        _loadMarkers()\n\n\n    # This will set the map objects to the values passed in\n    # @param DOMelement container The DOM element of the map container\n    # @param Object options Options from the map (e.g. zoom, lat, lng)\n    _initMapObject = (container, options) ->\n\n        # set default\n        options = $.extend {\n            lat: _startCenter.lat,\n            lng: _startCenter.lng,\n            zoom: 6\n        }, options\n\n        # set object\n        _map = new google.maps.Map container, {\n            center: new google.maps.LatLng(options.lat, options.lng),\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\n            zoom: options.zoom\n        }\n\n\n    # pan the map to a given lat/lgn/zoom\n    # @param float lat Latitude value\n    # @param float lng Longitude value\n    # @param integer zoom Zoom value\n    _moveToLocation = (lat, lng, zoom) ->\n\n        center = new google.maps.LatLng(lat, lng)\n\n        # using global variable:\n        _map.panTo center\n        _map.setZoom 11\n\n\n    # load markets for the bounds\n    _loadMarkers = () ->\n\n        # only get points if zoomed enough in\n        if (_zoomMax && _map.getZoom() < _zoomMax) then return false;\n\n        # set data to send to api\n        data = {\n            bounds: _map.getBounds().toUrlValue(),\n        }\n\n        # load markers\n        $.ajax {\n            url: \"/listings\",\n            method: \"GET\",\n            data: data,\n            success: (data) ->\n\n                # return the ids of all checkboxes as tags\n                tags = []\n                $(\".filters .groups .tags input[type='checkbox']:checked\").each (index, value) ->\n                    tags.push $(value).val()\n\n                # filter the tags\n                console.log('todo: filter markers based on tags')\n\n                _setMarker listing for listing in data['listings']\n        }\n\n\n     # load marker cluster\n     _loadMarkerCluster = () ->\n\n         # set data to send to api\n         data = _getFilterData()\n\n         # load markers\n         $.ajax {\n             url: \"/listings\",\n             method: \"GET\",\n             data: data,\n             success: (data) ->\n\n                 # reset markers\n                 _markers = [];\n\n                 # loop through each data and build _markers array\n                 $(data['listings']).each (index, listing) ->\n                     _markers.push new google.maps.Marker {\n                         'position': new google.maps.LatLng(listing.loc[1], listing.loc[0])\n                     }\n\n                 markerCluster = new MarkerClusterer _map, _markers, {\n                     gridSize: 60,\n                 }\n         }\n\n\n     # get the checked filter boxes as an array\n     _getFilterData = () ->\n\n         # set data to send to api\n         return {\n             bounds: _map.getBounds().toUrlValue(),\n             tags: (->\n                 # return the ids of all checkboxes as tags\n                 tags = []\n                 $ \".filters .groups .tags input[type='checkbox']:checked\").each( (index, value) ->\n                     tags.push($(value).val());\n\n                 #return tags\n             )()\n         }\n\n\n     # set a single marker\n     # @param object listing A single listing\n     # @param object options Options for the marker\n     _setMarker = (listing, options) ->\n\n         # set default\n         options = $.extend {\n             infowindow: true,\n             draggable: false,\n             animation: null,\n         }, options\n\n         latLng = new google.maps.LatLng listing.loc[1], listing.loc[0]\n\n         # Creating a marker if not previously loaded\n         if (!_markers[listing._id])\n             marker = new google.maps.Marker {\n                 position: latLng,\n                 map: _map,\n                 title: listing.name,\n                 draggable: options.draggable,\n                 animation: options.animation\n             }\n\n             _markers[listing._id] = marker;\n\n             if (options.infowindow)\n\n                 # create the info window\n                 contentString = '<div class=\"infowindow\">'+\n                 '<h2>'+listing[\"name\"]+'</h2>'+\n                 '<p class=\"rating\">'+\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>' +\n                         '<span class=\"glyphicon glyphicon-star-empty\" aria-hidden=\"true\"></span>' +\n                 '</p>'+\n                 '<p>'+listing[\"description_short\"]+'</p>'+\n                 '<p>'+listing[\"address\"]+'</p>'+\n                 '<p><a href=\"/listings/'+listing[\"_id\"]+'\">Go to page</a></p>'+\n                 '</div>'\n\n                 infowindow = new google.maps.InfoWindow {\n                     content: contentString\n                 }\n\n                 google.maps.event.addListener marker, 'click', () ->\n                     infowindow.open(_map, marker)\n\n                 # if draggable, set to draggable\n                 if (options.draggable)\n                     google.maps.event.addListener marker, 'dragend', () ->\n                        $(\"input[name='loc[1]']\").val(marker.getPosition().lat())\n                        $(\"input[name='loc[0]']\").val(marker.getPosition().lng())\n\n\n     # This is to remove all markers from the map. Used\n     # when we need to redraw (e.g. set tag filters, not move)\n     _removeMarkers = () ->\n\n         # remove marker\n         _markers[i].setMap(null) for i in _markers\n\n         # empty _markers\n         _markers = {};\n\n     # public\n     return {\n         init: _init\n     }\n)()\n"]}